#!/usr/bin/env python3

"""
Convert a FITS image generated by wsclean from orthographic sine projection to 
HEALpix.
"""

import os
import sys

from astropy.io import fits as astrofits
from astropy.table import Table as AstroTable

from reproject import reproject_to_healpix

from lsl.common.progress import ProgressBarPlus


def main(args):
    pb = ProgressBarPlus(max=len(args))
    sys.stdout.write(pb.show()+'\r')
    sys.stdout.flush()
    
    for filename in args:
        ## Load in the data and trim off the degenerate axes
        hdu = astrofits.open(filename, mode='readonly')
        hdr = hdu[0].header
        hdr['NAXIS'] = 2
        for axis in (3, 4):
            for key in ('NAXIS', 'CTYPE', 'CRPIX', 'CRVAL', 'CDELT', 'CUNIT'):
                if key[0] == 'C':
                    altkey = key.replace('C', 'O')
                    hdr[f"{altkey}{axis}"] = hdr[f"{key}{axis}"]
                del hdr[f"{key}{axis}"]
        image = hdu[0].data[0,0,...]
        try:
            beam = hdu[1].data[0,0,...]
        except IndexError:
            beam = None
        hdu.close()
        
        for data,tag in zip((image,beam), ('pix','wgt')):
            if data is None:
                continue
                
            # Reproject to HEALpix
            hpx, _ = reproject_to_healpix((data, hdr), 'icrs', order='nearest-neighbor', nested=False, nside=256)
            
            # Save the HEALpix data to FITS
            t = AstroTable()
            t['flux'] = hpx
            t.meta['ORDERING'] = 'RING'
            t.meta['COORDSYS'] = 'E'
            t.meta['NSIDE'] = 256
            t.meta['INDXSCHM'] = 'IMPLICIT'
            for key in ('TELESCOP', 'OBSERVER', 'OBJECT', 'ORIGIN', 'DATE-OBS', 'EQUINOX', 'SPECSYS'):
                try:
                    t.meta[key] = hdr[key]
                except KeyError:
                    pass
            for key in hdr.keys():
                if key[:3] == 'WSC':
                    t.meta[key] = hdr[key]
                elif key[:1] == 'O':
                    t.meta[key] = hdr[key]
                    
            outname = os.path.basename(filename)
            outname, _ = os.path.splitext(outname)
            outname += '_heal'+tag+'.fits'
            t.write(outname)
            
        pb.inc()
        sys.stdout.write(pb.show()+'\r')
        sys.stdout.flush()
        
    sys.stdout.write(pb.show()+'\r')
    sys.stdout.write('\n')
    sys.stdout.flush()


if __name__ == '__main__':
    main(sys.argv[1:])
